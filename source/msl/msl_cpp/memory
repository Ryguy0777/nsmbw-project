#pragma once

#include <cstddef>
#include <type_traits>

namespace std
{

template <class T>
class allocator
{
public:
    using value_type = T;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    using propagate_on_container_move_assignment = true_type;

    allocator() = default;

    template <class U>
    allocator(const allocator<U>&) {}

    ~allocator() = default;

    T* allocate(size_t n)
    {
        return static_cast<T*>(::operator new(n * sizeof(T)));
    }

    void deallocate(T* p, size_t) noexcept
    {
        ::operator delete(p);
    }
};

} // namespace std