#pragma once

namespace std
{

template <class T, T v>
struct integral_constant {
    static constexpr T value = v;
    using value_type = T;
    using type = integral_constant<T, v>;

    constexpr operator value_type() const noexcept
    {
        return value;
    }
};

template <bool B>
struct bool_constant : integral_constant<bool, B> {
};

using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

template <class T>
struct remove_reference {
    using type = T;
};

template <class T>
struct remove_reference<T&> {
    using type = T;
};

template <class T>
struct remove_reference<T&&> {
    using type = T;
};

template <class T>
using remove_reference_t = typename remove_reference<T>::type;

template <class T, class U>
struct is_same : std::false_type {
};

template <class T>
struct is_same<T, T> : std::true_type {
};

template <class T, class U>
constexpr bool is_same_v = is_same<T, U>::value;

#define DECLARE_BOOL_TYPE_TRAIT(name, predicate)                                                   \
    template <class T>                                                                             \
    using name = std::bool_constant<predicate>;                                                    \
    template <class T>                                                                             \
    constexpr bool name##_v = name<T>::value

DECLARE_BOOL_TYPE_TRAIT(is_integral, __is_integral(T));
DECLARE_BOOL_TYPE_TRAIT(is_floating_point, __is_floating_point(T));
DECLARE_BOOL_TYPE_TRAIT(is_arithmetic, __is_arithmetic(T));
DECLARE_BOOL_TYPE_TRAIT(is_pointer, __is_pointer(T));
DECLARE_BOOL_TYPE_TRAIT(is_reference, __is_reference(T));
DECLARE_BOOL_TYPE_TRAIT(is_lvalue_reference, __is_lvalue_reference(T));
DECLARE_BOOL_TYPE_TRAIT(is_rvalue_reference, __is_rvalue_reference(T));
DECLARE_BOOL_TYPE_TRAIT(is_const, __is_const(T));
DECLARE_BOOL_TYPE_TRAIT(is_volatile, __is_volatile(T));
DECLARE_BOOL_TYPE_TRAIT(is_trivially_copyable, __is_trivially_copyable(T));
DECLARE_BOOL_TYPE_TRAIT(is_trivially_destructible, __is_trivially_destructible(T));
DECLARE_BOOL_TYPE_TRAIT(is_trivially_constructible, __is_trivially_constructible(T));

DECLARE_BOOL_TYPE_TRAIT(is_signed, __is_signed(T));
DECLARE_BOOL_TYPE_TRAIT(is_unsigned, __is_unsigned(T));
DECLARE_BOOL_TYPE_TRAIT(is_signed_integral, __is_integral(T) && __is_signed(T));
DECLARE_BOOL_TYPE_TRAIT(is_unsigned_integral, __is_integral(T) && __is_unsigned(T));

#undef DECLARE_BOOL_TYPE_TRAIT

} // namespace std