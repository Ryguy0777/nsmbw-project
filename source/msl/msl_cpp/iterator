#pragma once

#include <cstddef>

namespace std
{

template <class C>
constexpr auto size(const C& c) -> decltype(c.size())
{
    return c.size();
}

template <class T, std::size_t N>
constexpr std::size_t size(const T (&array)[N]) noexcept
{
    return N;
}

template<class T>
constexpr auto distance(T first, T last) -> decltype(last - first)
{
    return last - first;
}

} // namespace std