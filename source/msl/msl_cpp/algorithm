#pragma once

#include "utility"

namespace std
{

template <class T>
constexpr const T& min(const T& l, const T& r)
{
    return (r < l) ? r : l;
}

template <class T>
constexpr const T& max(const T& l, const T& r)
{
    return (l < r) ? r : l;
}

template <class Iterator, class Compare>
constexpr void sort(Iterator begin, Iterator end, Compare comp)
{
    auto partition = [](Iterator begin, Iterator end, Compare comp) {
        auto pivot = *end;
        auto sortedIndex = begin;

        for (auto i = begin; i < end; ++i) {
            if (comp(*i, pivot)) {
                swap(*sortedIndex++, *i);
            }
        }

        swap(*sortedIndex, *end);
        return sortedIndex;
    };

    if (begin >= end) {
        return;
    }

    auto pivot = partition(begin, end - 1, comp);

    sort(begin, pivot, comp);
    sort(pivot + 1, end, comp);
}

template <class Iterator>
constexpr void sort(Iterator begin, Iterator end)
{
    sort(begin, end, [](auto l, auto r) { return l < r; });
}

} // namespace std