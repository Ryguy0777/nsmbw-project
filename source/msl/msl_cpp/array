#pragma once

#include "utility"
#include <cstddef>

namespace std
{

template <class T, std::size_t N>
class array
{
public:
    using value_type = T;
    using size_type = std::size_t;
    using difference_type = std::ptrdiff_t;
    using reference = T&;
    using const_reference = const T&;
    using pointer = T*;
    using const_pointer = const T*;

    // TODO: iterator, const_iterator, reverse_iterator, const_reverse_iterator

    constexpr reference at(size_type index) noexcept
    {
        // TODO: std::out_of_range exception
        return m_data[index];
    }

    constexpr const_reference at(size_type index) const noexcept
    {
        // TODO: std::out_of_range exception
        return m_data[index];
    }

    constexpr reference operator[](size_type index) noexcept
    {
        return m_data[index];
    }

    constexpr const_reference operator[](size_type index) const noexcept
    {
        return m_data[index];
    }

    constexpr reference front() noexcept
    {
        return m_data[0];
    }

    constexpr const_reference front() const noexcept
    {
        return m_data[0];
    }

    constexpr reference back() noexcept
    {
        return m_data[N - 1];
    }

    constexpr const_reference back() const noexcept
    {
        return m_data[N - 1];
    }

    constexpr pointer data() noexcept
    {
        return m_data;
    }

    constexpr const_pointer data() const noexcept
    {
        return m_data;
    }

    constexpr pointer begin() noexcept
    {
        return m_data;
    }

    constexpr const_pointer begin() const noexcept
    {
        return cbegin();
    }

    constexpr const_pointer cbegin() const noexcept
    {
        return m_data;
    }

    constexpr pointer end() noexcept
    {
        return m_data + N;
    }

    constexpr const_pointer end() const noexcept
    {
        return cend();
    }

    constexpr const_pointer cend() const noexcept
    {
        return m_data + N;
    }

    // TODO: rbegin, crbegin, rend, crend

    constexpr bool empty() const noexcept
    {
        return N == 0;
    }

    constexpr size_type size() const noexcept
    {
        return N;
    }

    constexpr size_type max_size() const noexcept
    {
        return N;
    }

    constexpr void fill(const T& value) noexcept
    {
        for (size_type i = 0; i < N; ++i) {
            m_data[i] = value;
        }
    }

    constexpr void swap(array& other) noexcept
    {
        for (size_type i = 0; i < N; ++i) {
            std::swap(m_data[i], other.m_data[i]);
        }
    }

private:
    value_type m_data[N] = {};
};

template <class T, std::size_t N>
constexpr void swap(array<T, N>& lhs, array<T, N>& rhs) noexcept
{
    lhs.swap(rhs);
}

} // namespace std